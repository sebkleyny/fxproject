import os
import math
import numpy as np
import pandas as pd

#Currency pairs list:
#Canada USDCAD BoC
#England GBPUSD BoE
#Japan USDJPY BoJ
#Euro EURUSD ECB
#US EURUSD Fed
#Aus AUDUSD RBA
#New Zealand NZDUSD RBNZ
#Swiss USDCHF SNB

currencypair = ["BoC" , "BoE" , "BoJ" , "ECB" , "Fed" , "RBA" , "RBNZ" , "SNB"]

#writing the template excel doc
writer = pd.ExcelWriter('THIRD_ITERATION_13to36mins_Granularity1min_and5bps.xlsx' , engine='xlsxwriter' )

#Creating the analysis function using country as input
def Currencyanalysis(Country):
    
    dataframe_country = pd.DataFrame([]) # creating data frame for currency list (in order to concatanate with prices)
    
    #imorting Event Data CSV list
    csv_list = os.listdir('/Users/sebkleynhans/Desktop/OandaFX/18Jan - Interest Rate Decisions Analysis [t Range -0.0125 to 0.125]/Interest Rate Decisions Analysis [t Range -0.0125 to 0.125]/')

    csv_list = [name for name in csv_list if name != ".DS_Store"] #removing hidden files in the csv directory i.e. ".DS_Store"

    r = len(csv_list) #length of csv list
    a = 0
    
    while a < r:

        if Country in csv_list[a]:
            
            dataframe = pd.DataFrame([]) # creating data frame for LVSV values
            dataframe_exit = pd.DataFrame([]) # creating data frame for exit values
            dataframe_premium = pd.DataFrame([]) # data frame for the premium values
            dataframe_optimisation = pd.DataFrame([]) # creating data frame for the combination of exit and premium values
            
            #loading csv data: pandas to read the csv + numpy to form an array and collate the data
            data = pd.read_csv('/Users/sebkleynhans/Desktop/OandaFX/18Jan - Interest Rate Decisions Analysis [t Range -0.0125 to 0.125]/Interest Rate Decisions Analysis [t Range -0.0125 to 0.125]/'+csv_list[a], sep=',')
            
            data_array = np.array(data) #note - that after you import the csv you need to put it into an array (through numpy)

            array_length = len(data_array)
    
            # finding max and min for sv and lv
            max_lv = data_array[:,11].max()
            max_sv = data_array[:,12].max()
            min_lv = data_array[:,11].min()
            min_sv = data_array[:,12].min()

            #OPTIMISATION MATRICES
            #1st iteration: start texit value 20 mins (0.01387) rounded up and finish at 90 mins (0.062415) rounded up
            
            #2nd iteration: start texit value 0 mins and finish at 20 mins
            
            ###########TIME RANGE - ENTER START AND END VALUES HERE - make sure to be as granular as possible !
            texit_start = 13
            texit_end = 36

            #converting standarised time values to minutes after event
            time_conversion = 20 / 0.013888889

            #finding the iterative variable for the start and end exit time in the desired range
            i = 0
            while i < array_length:
                time_value = data_array[i][2]
                if round(time_value * time_conversion) >= texit_start:
                    texit_start_iter = i
                    break
                i = i + 1

            i = 0
            while i < array_length:
                time_value = data_array[i][2]
                if round(time_value * time_conversion) >= texit_end:
                    texit_end_iter = i
                    break
                i = i + 1
      
            #finding long and short positions for each texit situation
            lv_exit = []
            sv_exit = []
            time_value_array = []
            
            i = texit_start_iter
            
            while i < texit_end_iter + 1:
                time_value_array.append(data_array[i][2])
                lv_exit.append(data_array[i][11])
                sv_exit.append(data_array[i][12])

                i = i + 1
            
            exit_array_length = len(lv_exit) - 1
            profit_position = []
            
            #FIND A BETTER CONDITION !!!
            #finding the position that is profiting and deisgnating the array to the profit position
            if lv_exit[exit_array_length] > 0:
                profit_position = lv_exit

            if sv_exit[exit_array_length] > 0:
                profit_position = sv_exit     #NOTE - that if both positions (at the max(exit) time) are negative than no result will be provided
        
            #TEMPORARY SOLUTION !!!!
            else:
                profit_position = lv_exit

            #Converting the standardised time into: "Minutes after event"
            time_value_array = [ round(x * time_conversion) for x in time_value_array ]

            #STRUCTURING THE DATA
            #Name----------------
            dataframe = dataframe.append(pd.DataFrame({ 'FX Pair' : [csv_list[a]] , 'Max LV' : max_lv , 'Min LV' : min_lv , 'Max SV' : max_sv , 'Min SV' : min_sv}))
            dataframe = pd.DataFrame.sort_index(dataframe) #sorting the index/dates of event into ascending order

            #re-arranging columns in the dataframe
            dataframe = dataframe[[ 'FX Pair' , 'Max LV' ,  'Min LV' , 'Max SV' , 'Min SV' ]]

            #Exit values - the array of profiting positions----------
            dataframe_exit = pd.DataFrame({'Profit - Exit' : profit_position } , index = [time_value_array])
            dataframe_exit = pd.DataFrame.transpose(dataframe_exit)

            #Adding the premium colums
            #####CHOOSE PREMIUM RANGE AND GRANULARITY HERE
            premium_end = 55
            premium_granularity = 5
            
            #Premium dataframe
            premium_list = pd.Series(range(5 , premium_end , premium_granularity))
            dataframe_premium = dataframe_premium.append(premium_list , ignore_index = True ).transpose()
            
            #adding the exit and premium values into the optimisation matrix
            dataframe_optimisation = dataframe_optimisation.append(dataframe_exit)
            dataframe_optimisation = dataframe_optimisation.append(dataframe_premium)
            
            #OPTIMISATION CALCS: (Texit - Premium calcs)
            #creating range to put into the for loop (NB: for loops can only work through lists)
            premium_range = list(range(0 , len(premium_list) )) #fy
            exit_range = time_value_array  #fx

            print(dataframe_exit)
            #NEED TO SOLVE FOR THE BLANK DATA POINTS
            #NB: fy = exit value & fx = premium
            for fx in exit_range:
                for fy in premium_range:
                    dataframe_optimisation.loc[fy,fx] = dataframe_exit.iat[0,fx - texit_start] - dataframe_premium.iat[fy,0]

            print(dataframe_optimisation)
            #COMBINING FINAL DATAFRAMES
            dataframe_country = dataframe_country.append(dataframe)
            dataframe_country = dataframe_country.append(dataframe_optimisation)

            #creating the csv with the data
            dataframe_country.to_excel( writer, sheet_name = Country )
    
        a = a + 1

for c in currencypair:
    Currencyanalysis(c)

#saving the final output excel file
writer.save()
