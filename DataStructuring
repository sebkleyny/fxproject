import os
import math
import sqlite3
import numpy as np
import pandas as pd

#Currency pairs list:
#Canada USDCAD BoC
#England GBPUSD BoE
#Japan USDJPY BoJ
#Euro EURUSD ECB
#US EURUSD Fed
#Aus AUDUSD RBA
#New Zealand NZDUSD RBNZ
#Swiss USDCHF SNB

currencypair = ["BoC" , "BoE" , "BoJ" , "ECB" , "Fed" , "RBA" , "RBNZ" , "SNB"]

#Creating the analysis function using country as input
def Currencyanalysis(Country):

    #imorting Event Data CSV list
    csv_list = os.listdir('/Users/sebkleynhans/Desktop/OandaFX/18Jan - Interest Rate Decisions Analysis [t Range -0.0125 to 0.125]/Interest Rate Decisions Analysis [t Range -0.0125 to 0.125]/')

    csv_list = [name for name in csv_list if name != ".DS_Store"] #removing hidden files in the csv directory i.e. ".DS_Store"

    r = len(csv_list) #length of csv list
    a = 0
    
    while a < r:

        if Country in csv_list[a]:

            #loading csv data: pandas to read the csv + numpy to form an array and collate the data
            data = pd.read_csv('/Users/sebkleynhans/Desktop/OandaFX/18Jan - Interest Rate Decisions Analysis [t Range -0.0125 to 0.125]/Interest Rate Decisions Analysis [t Range -0.0125 to 0.125]/'+csv_list[a], sep=',')
            
            data_array = np.array(data) #note - that after you import the csv you need to put it into an array (through numpy)

            array_length = len(data_array)

            #OPTIMISATION MATRICES
            #1st iteration:
            
            #----------------------------------------------------------------------
            ########INPUT VALUES############
            
            #TIME RANGE - ENTER START AND END VALUES HERE !
            texit_start = -5
            texit_end = 150

            #####CHOOSE PREMIUM RANGE AND GRANULARITY HERE
            premium_end = 50
            premium_granularity = 5

            #----------------------------------------------------------------------
            #SLICING DATAFRAMES AND ESTABLISHING CONDITIONS TO ESTABLISH WINNING AND LOSING POSITIONS FOR DATA STRUCTURING
            
            #converting standarised time values to minutes after event
            time_conversion = 20 / 0.013888889

            #finding the iterative variable for the start and end exit time in the desired range
            i = 0
            while i < array_length:
                time_value = data_array[i][2]
                if round(time_value * time_conversion) >= texit_start:
                    texit_start_iter = i
                    break
                i = i + 1

            i = 0
            while i < array_length:
                time_value = data_array[i][2]
                if round(time_value * time_conversion) >= texit_end:
                    texit_end_iter = i
                    break
                i = i + 1
      
            #finding long and short positions for each texit situation
            lv_exit = []
            sv_exit = []
            time_value_array = []
            
            i = texit_start_iter
            
            while i < texit_end_iter + 1:
                time_value_array.append(data_array[i][2])
                lv_exit.append(data_array[i][11])
                sv_exit.append(data_array[i][12])

                i = i + 1
            
            exit_array_length = len(lv_exit) - 1
            winning_position = []
            losing_position = []
            
            #ESTABLISHING CONDITIONS TO DEFINE WINNING AND LOSING POSITIONS
            #the winning position has the greater amount of positive numbers than the losing position

            pos_lv = sum(1 for p in lv_exit if p > 0)
            pos_sv = sum(1 for n in sv_exit if n > 0)
            
            #LONG position has more positive numbers (profiting)
            if pos_lv > pos_sv:
                winning_position = lv_exit
                losing_position = sv_exit
            
            #SHORT position has more positive numbers (profiting)
            if pos_sv > pos_lv:
                winning_position = sv_exit
                losing_position = lv_exit
            
            #NOTE - that if both positions have an equal amount of positive numbers than the long is taken as the winning position
            else:
                winning_position = lv_exit
                losing_position = sv_exit
            
            #Converting the standardised time into: "Minutes after event"
            time_value_array = [ round(x * time_conversion) for x in time_value_array ]

            #----------------------------------------------------------------------
            #STRUCTURING THE DATA
            #Exit values - the array of profiting positions----------

            #creating an empty dataframe with the max time range (i.e. including missing data points)
            max_time_range = list(range(texit_start, texit_end + 1))

            df_exit = pd.DataFrame({'Time' : max_time_range } ) # creating data frame for maximum time values
            df_w = pd.DataFrame( {'Time' : time_value_array , '0' : winning_position } ) #creating dataframe for the winning values
            df_l = pd.DataFrame( {'Time' : time_value_array , '0' : losing_position } ) #creating dataframe for the losing values
            
            #Merging the two dataframes - to create the WINNING position Dataframe
            df_merge_w = pd.merge(df_exit , df_w , on = 'Time' ,how = 'left' )
            df_merge_w.set_index('Time' , inplace = True)
            df_merge_w = df_merge_w.transpose()
            
            #Merging the two dataframes - to create the LOSING position Dataframe
            df_merge_l = pd.merge(df_exit , df_l , on = 'Time' ,how = 'left' )
            df_merge_l.set_index('Time' , inplace = True)
            df_merge_l = df_merge_l.transpose()

            #Premium dataframe
            df_premium = pd.DataFrame([]) # creating data frame for premium
            premium_list = pd.Series(range(0 , premium_end + premium_granularity , premium_granularity))
            df_premium = pd.DataFrame({'Premium' : premium_list} )
            
            #creating temporary colums to merge both data frates
            df_merge_w['tmp'] = 1
            df_premium['tmp'] = pd.Series(range(1 , len(df_premium) + 1))

            #Merging exit and premium values to form the optimisation matrix
            df_optimisation = pd.merge(df_merge_w , df_premium , on = ['tmp'] , how = 'outer')
            df_optimisation = df_optimisation.drop('tmp', axis=1)
            df_optimisation = df_optimisation.set_index('Premium')

            #----------------------------------------------------------------------
            #OPTIMISATION CALCS: (Profit = Texit - Premium calcs)
            exit_range = max_time_range #fx
            premium_range = list(range(0 ,len(premium_list) )) #fy

            #NB: fx = exit value & fy = premium
            for fx in exit_range:
                for fy in premium_range:
                    #Finding when the losing position hits the premium
                    #defining the net position (or "Winning Position") as Profit - Premium when the "Losing position" has hit the premium
                    if -df_premium.iloc[fy,0] >= df_merge_l.iloc[0, fx - texit_start]:
                        df_optimisation.loc[fy * premium_granularity ,fx] = df_merge_w.iloc[0,fx - texit_start ] - df_premium.iloc[fy,0]
                    #defining the net position (or "Winning Position") as Profit + Loss when the "Losing position" hits not the premium
                    else:
                        df_optimisation.loc[fy * premium_granularity ,fx] = df_merge_w.iloc[0,fx - texit_start ] + df_merge_l.iloc[0, fx - texit_start]
  
            #----------------------------------------------------------------------
            #SAVING ONTO A SQL DATA BASE
            conn = sqlite3.connect('Optimisation_InterestRateDecisions.db')
            c = conn.cursor()

            #Creating SQL tables
            df_optimisation.to_sql(csv_list[a] , conn )
            
            conn.close
            c.close
                
        a = a + 1

for c in currencypair:
    Currencyanalysis(c)



